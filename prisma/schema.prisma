// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          Role      @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  patient       Patient?
  caretaker     Caretaker?
}

model Patient {
  id          String    @id @default(uuid())
  name        String
  phoneNumber String
  address     String
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Add these new fields
  latitude    Float?
  longitude   Float?
  lastLocationUpdate DateTime?
  locationHistory  LocationHistory[]
  medicalData     MedicalData?  
}

model Caretaker {
  id          String    @id @default(uuid())
  name        String
  phoneNumber String
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// New model to store location history
model LocationHistory {
  id          String    @id @default(uuid())
  patientId   String
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  latitude    Float
  longitude   Float
  timestamp   DateTime  @default(now())
}

// Add these models to your existing schema

model MedicalData {
  id                String   @id @default(uuid())
  patientId         String   @unique
  patient           Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Basic information
  bloodType         String?
  height            Float?   // in centimeters
  weight            Float?   // in kilograms
  allergies         String?  // JSON string of allergies
  
  // Medical conditions and medications
  chronicConditions String?  // JSON string of chronic conditions
  currentMedications String?  // JSON string of current medications
  
  // Emergency information
  emergencyContactName    String?
  emergencyContactPhone   String?
  emergencyContactRelation String?
  
  // Additional fields
  notes             String? @db.Text
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Medical records
  medicalRecords    MedicalRecord[]
}

model MedicalRecord {
  id           String     @id @default(uuid())
  medicalDataId String
  medicalData  MedicalData @relation(fields: [medicalDataId], references: [id], onDelete: Cascade)
  
  recordType   String     // e.g., "Doctor Visit", "Lab Test", "Hospitalization"
  date         DateTime
  doctorName   String?
  diagnosis    String?
  prescription String?
  notes        String?    @db.Text
  attachmentUrl String?
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum Role {
  PATIENT
  CARETAKER
}
